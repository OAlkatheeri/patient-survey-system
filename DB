-- Enable necessary extensions
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";

-- Create admin_users table
CREATE TABLE admin_users (
    id UUID DEFAULT uuid_generate_v4() PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    email VARCHAR(255) UNIQUE NOT NULL,
    role VARCHAR(50) NOT NULL CHECK (role IN ('super_admin', 'admin')),
    assigned_clinic VARCHAR(50),
    status VARCHAR(20) DEFAULT 'active' CHECK (status IN ('active', 'inactive')),
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    created_by UUID REFERENCES admin_users(id),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Create surveys table
CREATE TABLE surveys (
    id UUID DEFAULT uuid_generate_v4() PRIMARY KEY,
    -- Basic Information
    patient_name VARCHAR(255) NOT NULL,
    patient_email VARCHAR(255) NOT NULL,
    patient_phone VARCHAR(50),
    visit_date DATE NOT NULL,
    clinic_location VARCHAR(50) NOT NULL,
    
    -- Overall Experience
    overall_satisfaction VARCHAR(50) NOT NULL,
    visit_type VARCHAR(50) NOT NULL,
    
    -- Reception Staff
    reception_satisfaction VARCHAR(50) NOT NULL,
    registration_smooth VARCHAR(10) NOT NULL,
    reception_comments TEXT,
    
    -- Nursing Staff
    nursing_professionalism VARCHAR(50) NOT NULL,
    nursing_prompt VARCHAR(10) NOT NULL,
    nursing_comments TEXT,
    
    -- Doctor Consultation
    doctor_satisfaction VARCHAR(50) NOT NULL,
    doctor_listening VARCHAR(10) NOT NULL,
    doctor_explanation VARCHAR(10) NOT NULL,
    doctor_comments TEXT,
    
    -- Clinic Environment
    clinic_cleanliness VARCHAR(50) NOT NULL,
    waiting_time_acceptable VARCHAR(10) NOT NULL,
    environment_comments TEXT,
    
    -- Additional Feedback
    liked_most TEXT,
    areas_improve TEXT,
    
    -- Recommendation
    recommendation_likelihood VARCHAR(50) NOT NULL,
    recommendation_comments TEXT,
    
    -- Contact Preferences
    want_contact VARCHAR(10) NOT NULL,
    contact_preference TEXT[] DEFAULT '{}',
    
    -- Consent
    consent_feedback_use VARCHAR(10) NOT NULL,
    
    -- Metadata
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Create follow_ups table
CREATE TABLE follow_ups (
    id UUID DEFAULT uuid_generate_v4() PRIMARY KEY,
    survey_id UUID REFERENCES surveys(id) ON DELETE CASCADE,
    patient_name VARCHAR(255) NOT NULL,
    patient_email VARCHAR(255) NOT NULL,
    patient_phone VARCHAR(50),
    clinic_location VARCHAR(50) NOT NULL,
    contact_preference TEXT[] DEFAULT '{}',
    priority VARCHAR(20) DEFAULT 'medium' CHECK (priority IN ('high', 'medium', 'low')),
    status VARCHAR(20) DEFAULT 'pending' CHECK (status IN ('pending', 'completed')),
    completed_at TIMESTAMP WITH TIME ZONE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Create indexes for performance
CREATE INDEX idx_surveys_clinic_location ON surveys(clinic_location);
CREATE INDEX idx_surveys_created_at ON surveys(created_at);
CREATE INDEX idx_surveys_overall_satisfaction ON surveys(overall_satisfaction);
CREATE INDEX idx_surveys_patient_email ON surveys(patient_email);
CREATE INDEX idx_follow_ups_status ON follow_ups(status);
CREATE INDEX idx_follow_ups_priority ON follow_ups(priority);
CREATE INDEX idx_admin_users_email ON admin_users(email);
CREATE INDEX idx_admin_users_status ON admin_users(status);

-- Create updated_at trigger function
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ language 'plpgsql';

-- Create triggers for updated_at
CREATE TRIGGER update_admin_users_updated_at BEFORE UPDATE ON admin_users
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_surveys_updated_at BEFORE UPDATE ON surveys
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_follow_ups_updated_at BEFORE UPDATE ON follow_ups
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

-- Row Level Security (RLS) Policies
ALTER TABLE admin_users ENABLE ROW LEVEL SECURITY;
ALTER TABLE surveys ENABLE ROW LEVEL SECURITY;
ALTER TABLE follow_ups ENABLE ROW LEVEL SECURITY;

-- Admin users policies
CREATE POLICY "Admin users can view all admin users" ON admin_users
    FOR SELECT USING (auth.uid() IN (
        SELECT auth.uid() FROM admin_users WHERE status = 'active'
    ));

CREATE POLICY "Super admins can insert admin users" ON admin_users
    FOR INSERT WITH CHECK (
        EXISTS (
            SELECT 1 FROM admin_users 
            WHERE auth.email() = email 
            AND role = 'super_admin' 
            AND status = 'active'
        )
    );

CREATE POLICY "Super admins can update admin users" ON admin_users
    FOR UPDATE USING (
        EXISTS (
            SELECT 1 FROM admin_users 
            WHERE auth.email() = email 
            AND role = 'super_admin' 
            AND status = 'active'
        )
    );

-- Surveys policies
CREATE POLICY "Anyone can insert surveys" ON surveys
    FOR INSERT WITH CHECK (true);

CREATE POLICY "Admins can view surveys" ON surveys
    FOR SELECT USING (
        EXISTS (
            SELECT 1 FROM admin_users 
            WHERE auth.email() = email 
            AND status = 'active'
            AND (
                role = 'super_admin' 
                OR assigned_clinic = surveys.clinic_location
            )
        )
    );

-- Follow-ups policies
CREATE POLICY "System can insert follow-ups" ON follow_ups
    FOR INSERT WITH CHECK (true);

CREATE POLICY "Admins can view follow-ups" ON follow_ups
    FOR SELECT USING (
        EXISTS (
            SELECT 1 FROM admin_users 
            WHERE auth.email() = email 
            AND status = 'active'
            AND (
                role = 'super_admin' 
                OR assigned_clinic = follow_ups.clinic_location
            )
        )
    );

CREATE POLICY "Admins can update follow-ups" ON follow_ups
    FOR UPDATE USING (
        EXISTS (
            SELECT 1 FROM admin_users 
            WHERE auth.email() = email 
            AND status = 'active'
            AND (
                role = 'super_admin' 
                OR assigned_clinic = follow_ups.clinic_location
            )
        )
    );

-- Insert default super admin (update email and use Supabase Auth to set password)
-- Note: You need to create this user in Supabase Auth first, then insert here
INSERT INTO admin_users (name, email, role, status) 
VALUES ('Super Admin', 'admin@clinic.com', 'super_admin', 'active');

-- Create a function to automatically create follow-ups
CREATE OR REPLACE FUNCTION create_follow_up_from_survey()
RETURNS TRIGGER AS $$
BEGIN
    IF NEW.want_contact = 'yes' THEN
        INSERT INTO follow_ups (
            survey_id,
            patient_name,
            patient_email,
            patient_phone,
            clinic_location,
            contact_preference,
            priority
        ) VALUES (
            NEW.id,
            NEW.patient_name,
            NEW.patient_email,
            NEW.patient_phone,
            NEW.clinic_location,
            NEW.contact_preference,
            CASE 
                WHEN NEW.overall_satisfaction = 'dissatisfied' THEN 'high'
                WHEN NEW.overall_satisfaction = 'satisfied' THEN 'medium'
                ELSE 'low'
            END
        );
    END IF;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Create trigger for automatic follow-up creation
CREATE TRIGGER create_follow_up_after_survey
AFTER INSERT ON surveys
FOR EACH ROW
EXECUTE FUNCTION create_follow_up_from_survey();
-- ===================================================

-- Re-enable RLS
ALTER TABLE admin_users ENABLE ROW LEVEL SECURITY;

-- Drop existing policies
DROP POLICY IF EXISTS "Admin users can view all admin users" ON admin_users;

-- Create a simpler policy for reading
CREATE POLICY "Anyone can read active admin users" ON admin_users
    FOR SELECT 
    USING (status = 'active');
-=====================================
-- Drop the existing insert policy
DROP POLICY IF EXISTS "Super admins can insert admin users" ON admin_users;

-- Create a new policy that properly checks the current user
CREATE POLICY "Super admins can insert admin users" ON admin_users
    FOR INSERT WITH CHECK (
        EXISTS (
            SELECT 1 FROM admin_users 
            WHERE email = auth.jwt() ->> 'email'
            AND role = 'super_admin' 
            AND status = 'active'
        )
    );

-- Also update the update policy for consistency
DROP POLICY IF EXISTS "Super admins can update admin users" ON admin_users;

CREATE POLICY "Super admins can update admin users" ON admin_users
    FOR UPDATE USING (
        EXISTS (
            SELECT 1 FROM admin_users 
            WHERE email = auth.jwt() ->> 'email'
            AND role = 'super_admin' 
            AND status = 'active'
        )
    );

--====================
-- Drop all existing policies on admin_users
DROP POLICY IF EXISTS "Admin users can view all admin users" ON admin_users;
DROP POLICY IF EXISTS "Super admins can insert admin users" ON admin_users;
DROP POLICY IF EXISTS "Super admins can update admin users" ON admin_users;

-- Create new simplified policies
-- Allow authenticated users to read admin_users
CREATE POLICY "Authenticated users can view admin users" ON admin_users
    FOR SELECT USING (auth.uid() IS NOT NULL);

-- Allow super_admins to do everything
CREATE POLICY "Super admins can manage admin users" ON admin_users
    FOR ALL USING (
        auth.jwt() ->> 'email' IN (
            SELECT email FROM admin_users 
            WHERE role = 'super_admin' 
            AND status = 'active'
        )
    );

--=================
-- Temporarily disable RLS to test
ALTER TABLE admin_users DISABLE ROW LEVEL SECURITY;

-- After testing, re-enable it
ALTER TABLE admin_users ENABLE ROW LEVEL SECURITY;
-================================
